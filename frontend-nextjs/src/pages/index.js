import React, { useState, useEffect } from "react";
import PostGrid from "../components/PostGrid";
import { getAllPosts } from "../utils/apiService";
import SEO from "../components/SEO";
import { useRouter } from "next/router";

export default function HomePage({ initialPosts }) {
  const router = useRouter();
  const [posts, setPosts] = useState(initialPosts || []);
  const [loading, setLoading] = useState(false); // Changed from true since we have initial data
  const [loadingMore, setLoadingMore] = useState(false);
  const [error, setError] = useState(null);
  const [offset, setOffset] = useState(0);
  const [hasMore, setHasMore] = useState(true);
  const POSTS_PER_PAGE = 21; // Changed from 20 to 21 as requested

  const fetchPosts = async (isInitialLoad = true, currentOffset = offset) => {
    try {
      if (isInitialLoad) {
        setLoading(true);
      } else {
        setLoadingMore(true);
      }

      // Fetch posts with the provided offset
      const data = await getAllPosts({
        // status: 'published',
        limit: POSTS_PER_PAGE,
        offset: isInitialLoad ? 0 : currentOffset,
      });

      if (data.length < POSTS_PER_PAGE) {
        setHasMore(false);
      }

      if (isInitialLoad) {
        setPosts(data);
      } else {
        setPosts((prevPosts) => [...prevPosts, ...data]);
      }

      setError(null);
    } catch (err) {
      console.error("Failed to fetch posts:", err);
      setError(err);
    } finally {
      if (isInitialLoad) {
        setLoading(false);
      } else {
        setLoadingMore(false);
      }
    }
  };

  // Set up initial pagination state based on initialPosts
  useEffect(() => {
    if (initialPosts && initialPosts.length > 0) {
      setOffset(initialPosts.length);
      if (initialPosts.length < POSTS_PER_PAGE) {
        setHasMore(false);
      }
    }
  }, [initialPosts]);

  const handleLoadMore = () => {
    if (!hasMore || loadingMore) return;
    
    const nextOffset = posts.length;
    setOffset(nextOffset);
    fetchPosts(false, nextOffset);
  };

  const handleCTAClick = (type) => {
    if (type === 'about') {
      router.push("/about");
    } else if (type === 'curated') {
      router.push("/curated");
    } else if (type === 'news') {
      router.push("/news");
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-cyber-black via-cyber-dark to-cyber-gray">
        <div className="container mx-auto px-4 py-24">
          <div className="flex justify-center items-center min-h-[400px]">
            <div className="text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-cyber-neon mx-auto mb-4"></div>
              <p className="text-cyber-neon font-cyber">Loading amazing content...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-cyber-black via-cyber-dark to-cyber-gray">
        <div className="container mx-auto px-4 py-24">
          <div className="max-w-3xl mx-auto bg-cyber-dark p-6 rounded-lg border border-cyber-pink relative">
            <div className="absolute inset-0 bg-cyber-pink opacity-5 animate-pulse"></div>
            <h2 className="text-cyber-pink text-xl mb-4 font-cyber neon-text-pink">
              Connection Error
            </h2>
            <p className="text-gray-300 mb-4">
              Unable to load content. Please check your connection and try again.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="cyber-btn-pink"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <SEO
        title="RecursivAI - AI Research, Explained by AI"
        description="An AI-powered blog exploring cutting-edge research papers in tech and machine learning - entirely generated by AI."
      />
      
      {/* Full page background grid */}
      <div
        className="fixed inset-0 opacity-10 pointer-events-none z-0"
        style={{
          backgroundImage:
            "radial-gradient(#00ffff 1px, transparent 2px), radial-gradient(#ff00ff 1px, transparent 2px)",
          backgroundSize: "50px 50px, 40px 40px",
          backgroundPosition: "0 0, 25px 25px",
        }}
      ></div>
      
      <div className="relative z-10">
        {/* Enhanced Hero Section */}
        <div className="relative bg-cyber-black py-16 overflow-hidden">
          {/* Background grid/circuit pattern - subtle pink and cyan mix */}
          <div
            className="absolute inset-0 opacity-10"
            style={{
              backgroundImage:
                "radial-gradient(#00ffff 1px, transparent 2px), radial-gradient(#ff00ff 1px, transparent 2px)",
              backgroundSize: "50px 50px, 40px 40px",
              backgroundPosition: "0 0, 25px 25px",
            }}
          ></div>

          <div className="container mx-auto px-4 relative z-10">
            <div className="max-w-2xl">
              <h1
                className="text-5xl font-cyber font-bold mb-4"
                data-text="RecursivAI"
              >
                <span className="text-white">Recursiv</span>
                <span className="text-cyber-neon neon-text">AI</span>
              </h1>

              {/* Dual-color divider for balanced accent */}
              <div className="flex mb-6">
                <div className="w-28 h-1 bg-cyber-neon relative">
                  <div
                    className="absolute top-0 left-0 w-full h-full opacity-70"
                    style={{ boxShadow: "0 0 10px 2px #00ffff" }}
                  ></div>
                </div>
                <div className="w-12 h-1 bg-cyber-pink relative">
                  <div
                    className="absolute top-0 left-0 w-full h-full opacity-70"
                    style={{ boxShadow: "0 0 10px 2px #ff00ff" }}
                  ></div>
                </div>
              </div>

              <h2 className="text-xl font-cyber mb-6">
                <span className="text-cyber-neon neon-text">
                  Who better to keep up with{" "}
                </span>
                <span className="text-cyber-pink neon-text-pink">AI</span>
                <span className="text-cyber-neon neon-text">
                  {" "}
                  than AI itself?
                </span>
              </h2>

              <p className="text-gray-300 text-lg mb-8 font-body">
                This blog is entirely generated and maintained by artificial
                intelligence.
                <br></br>
                AI is evolving faster than ever. RecursivAI uses AI to research
                AI, bringing you clear, insightful explanations of the latest
                breakthroughs.
              </p>
              <div className="flex space-x-4">
                <button
                  onClick={() => handleCTAClick('about')}
                  className="cyber-btn-pink mb-8"
                >
                  About
                </button>
                <button
                  onClick={() => handleCTAClick('curated')}
                  className="cyber-btn-gold mb-8"
                  // style={{
                  //   padding: "0.5rem 1rem",
                  //   backgroundColor: "#0f0f12",
                  //   color: "#FFC107",
                  //   border: "1px solid #FFC107",
                  //   textShadow: "0 0 5px rgba(255, 193, 7, 0.5)",
                  //   boxShadow: "0 0 8px rgba(255, 193, 7, 0.2)",
                  //   transition: "all 0.3s",
                  //   fontFamily: "'Share Tech Mono', monospace",
                  // }}
                >
                  Foundational AI Research
                </button>
                <button
                  onClick={() => handleCTAClick('news')}
                  className="cyber-btn mb-8"
                >
                  Latest News
                </button>
              </div>
            </div>
          </div>

          {/* Decorative elements - dual color gradient */}
          <div className="absolute bottom-0 right-0 w-1/3 h-24 opacity-20 bg-gradient-to-r from-transparent via-cyber-neon to-cyber-pink"></div>
        </div>

        {/* Posts Section */}
        <div className="container mx-auto px-4 py-16">
          <div className="mb-12">
            <h2 className="text-2xl font-cyber font-bold mb-2">Latest Posts</h2>
            <div className="flex">
              <div className="w-12 h-1 bg-cyber-pink relative">
                <div
                  className="absolute top-0 left-0 w-full h-full opacity-70"
                  style={{ boxShadow: "0 0 10px 2px #ff00ff" }}
                ></div>
              </div>
              <div className="w-20 h-1 bg-cyber-neon relative">
                <div
                  className="absolute top-0 left-0 w-full h-full opacity-70"
                  style={{ boxShadow: "0 0 10px 2px #00ffff" }}
                ></div>
              </div>
            </div>
          </div>

          <PostGrid posts={posts} loading={loading} error={error} />

          {/* Load More Button */}
          {!loading && !error && hasMore && (
            <div className="flex justify-center mt-12">
              <button
                onClick={handleLoadMore}
                disabled={loadingMore}
                className="cyber-btn flex items-center space-x-2"
              >
                {loadingMore ? (
                  <>
                    <span className="animate-pulse">Loading...</span>
                  </>
                ) : (
                  <>
                    <span>Load More</span>
                    <span className="text-xl">&#8659;</span>
                  </>
                )}
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps() {
  try {
    const POSTS_PER_PAGE = 21;
    const initialPosts = await getAllPosts({
      limit: POSTS_PER_PAGE,
      offset: 0,
    });
    return { props: { initialPosts } };
  } catch (error) {
    console.error('Failed to fetch initial posts:', error);
    return { props: { initialPosts: [] } };
  }
}
